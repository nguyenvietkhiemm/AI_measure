const data = {
    "weights": [
        [
            0.1605129510938498,
            0.4140882762184721,
            0.0016340073618971722,
            0.0014956563938074287,
            0.005402186740591624
        ],
        [
            0.5085468038418687,
            0.008807420898334108,
            0.0012098372513027265,
            0.0016244703672612397,
            0.0009729980010838756
        ],
        [
            -0.014872312980432742,
            0.38330987585563797,
            0.0017424841319692995,
            0.0025500467866345603,
            0.0012795015489474144
        ],
        [
            -0.04535254746824599,
            0.5229567068091617,
            0.00025924357346668623,
            0.0015708136743362861,
            0.002441691227780916
        ],
        [
            0.05295573986441641,
            -0.046212415829853214,
            -0.00012039767825209101,
            -0.017742946217732754,
            -0.0034354355016546147
        ],
        [
            -0.049928340031146615,
            0.08050690685542497,
            0.0035628257115298155,
            0.004307618616169447,
            -0.003022599491014656
        ],
        [
            -0.025268017261794277,
            0.018575998315616328,
            0.0070602581647037825,
            0.005736175633281538,
            -0.005288804387789729
        ],
        [
            0.08384143585899047,
            -0.06460454981366662,
            0.003277731060993414,
            0.0015619522597738623,
            0.0053476659411876015
        ],
        [
            0.0974754766596028,
            -0.06221771167475837,
            0.007721061131829365,
            -0.0027037423886514134,
            -0.0007963692473541555
        ],
        [
            0.048919377129924176,
            -0.06333522149546583,
            2.2388358362663656e-06,
            -0.0003187335712012777,
            0.007743178239413271
        ],
        [
            0.0590975042071118,
            -0.050171332621787586,
            0.01186297992887739,
            -0.0023871916186217297,
            -0.010963268595590615
        ],
        [
            0.008674740334155858,
            0.03754089522963235,
            0.004794176044898852,
            -0.007340563575689993,
            -0.011170907889325638
        ],
        [
            0.008218649090565707,
            -0.026141409947607015,
            0.00815675905739642,
            -0.006362600675168096,
            -0.0014599119144341856
        ],
        [
            -0.05138512605184407,
            -0.032974028905504,
            0.008963865055044972,
            -0.002929799710174719,
            -0.012297982820840995
        ],
        [
            0.02248219854486392,
            -0.08056216182283091,
            0.0016092752236418655,
            -0.01302995533281117,
            0.001473684911970634
        ],
        [
            0.09697379300969802,
            -0.08901653785184303,
            0.015365225647009793,
            -0.017483030946533137,
            -0.007109175221726037
        ],
        [
            0.057801583895261556,
            -0.06147306626538969,
            0.001541984605241515,
            -0.008398927717823697,
            -0.004525355288413989
        ],
        [
            0.026428530022556747,
            -0.04560698337963112,
            -0.009587906351101374,
            0.0122151611697775,
            0.021913159129143638
        ]
    ],
    "biases": [
        0.3267089532707804,
        0.25917181941298856,
        0.30400921640537426,
        0.32313632740376125,
        0.42249058270479173,
        0.4436823299573727,
        0.45785770489853783,
        0.4188811529311681,
        0.3730703248418341,
        0.24659011557304458,
        0.4384986820212845,
        0.39649269116501074,
        0.5079367461683445,
        0.5476715574732945,
        0.46626169375869875,
        0.42641918806453494,
        0.433591247446069,
        0.4926698228751467
    ],
    "min_vals": [
        113.0,
        20.0,
        1.0,
        16.0,
        1.0,
        24.0,
        39.0,
        29.0,
        43.0,
        60.0,
        70.0,
        80.0,
        80.0,
        25.0,
        20.0,
        80.0,
        40.0,
        20.0,
        70.0,
        40.0,
        30.0,
        30.0,
        15.0
    ],
    "max_vals": [
        205.0,
        140.0,
        2.0,
        50.0,
        5.0,
        58.0,
        73.0,
        54.0,
        150.0,
        120.0,
        120.0,
        130.0,
        130.0,
        50.0,
        30.0,
        130.0,
        80.0,
        35.0,
        110.0,
        80.0,
        50.0,
        50.0,
        30.0
    ]
};
class Linear_Model {
    constructor() {
        const { weights, biases, min_vals, max_vals } = data;
        this.weights = weights;
        this.biases = biases;
        this.min_vals = min_vals;
        this.max_vals = max_vals;
    }

    // Hàm chuẩn hóa giá trị đầu vào
    normalize(input, min_vals, max_vals) {
        return input.map((value, i) => (value - min_vals[i]) / (max_vals[i] - min_vals[i]));
    }

    // Hàm đưa giá trị từ chuẩn hóa về gốc
    denormalize(normalizedInput, min_vals, max_vals) {
        return normalizedInput.map((value, i) => value * (max_vals[i] - min_vals[i]) + min_vals[i]);
    }

    // Hàm dự đoán giá trị đầu ra
    predict(input) {
        // Chia min_vals và max_vals thành cho đầu vào và đầu ra
        const min_vals_input = this.min_vals.slice(0, input.length);
        const max_vals_input = this.max_vals.slice(0, input.length);
        const min_vals_output = this.min_vals.slice(input.length);
        const max_vals_output = this.max_vals.slice(input.length);

        // Chuẩn hóa đầu vào
        input = this.normalize(input, min_vals_input, max_vals_input);
    
        let results = new Array(this.weights.length).fill(0);
    
        for (let i = 0; i < results.length; i++) {
            results[i] = this.biases[i];
            for (let j = 0; j < input.length; j++) {
                results[i] += input[j] * this.weights[i][j];
            }
        }

        // Chuẩn hóa ngược để đưa ra kết quả cuối cùng
        results = this.denormalize(results, min_vals_output, max_vals_output);
        results = results.map(result => parseFloat(result.toFixed(1)));
        return results;
    }
}

export default Linear_Model;